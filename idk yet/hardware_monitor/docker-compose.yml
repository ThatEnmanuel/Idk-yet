version: '3.8'

services:
  hardware-monitor:
    build: .
    container_name: hardware-monitor
    ports:
      - "5000:5000"
    environment:
      # Configuración del servidor
      - HOST=0.0.0.0
      - PORT=5000
      - DEBUG=${DEBUG:-False}
      
      # Configuración de seguridad
      - SECRET_KEY=${SECRET_KEY:-change-me-in-production}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-change-jwt-secret-in-production}
      
      # Configuración de logging
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - LOG_FILE=hardware_monitor.log
      
      # Configuración de cache
      - CACHE_TYPE=${CACHE_TYPE:-simple}
      - CACHE_DEFAULT_TIMEOUT=300
      
      # Configuración de métricas
      - METRICS_ENABLED=${METRICS_ENABLED:-true}
      
      # Configuración de rate limiting
      - RATE_LIMIT_DEFAULT=100 per minute
      - RATE_LIMIT_STRICT=10 per second
      
      # Configuración de la aplicación
      - UPDATE_INTERVAL=5000
      - MAX_DATA_POINTS=20
      
      # Umbrales de alerta
      - CPU_ALERT_THRESHOLD=90.0
      - MEMORY_ALERT_THRESHOLD=90.0
      - DISK_ALERT_THRESHOLD=90.0
      
      # Configuración de CORS
      - CORS_ORIGINS=http://localhost:5000,http://127.0.0.1:5000
      
    volumes:
      # Montar directorio de logs
      - ./logs:/app/logs
      # Montar archivo de configuración opcional
      - ./config.py:/app/config.py:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health/basic", "-u", "admin:admin"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - hardware-monitor-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Servicio de nginx como proxy reverso para producción
  nginx:
    image: nginx:alpine
    container_name: hardware-monitor-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      hardware-monitor:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - hardware-monitor-network
    profiles:
      - production
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'

  # Servicio de Prometheus para métricas (opcional)
  prometheus:
    image: prom/prometheus:latest
    container_name: hardware-monitor-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    depends_on:
      - hardware-monitor
    restart: unless-stopped
    networks:
      - hardware-monitor-network
    profiles:
      - monitoring

  # Servicio de Grafana para visualización (opcional)
  grafana:
    image: grafana/grafana:latest
    container_name: hardware-monitor-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - hardware-monitor-network
    profiles:
      - monitoring

networks:
  hardware-monitor-network:
    driver: bridge

volumes:
  logs:
  prometheus_data:
  grafana_data: 